IV.Nullability

1.Nullable Types

val s1: String = "test"
val s2: String = null // compile error*
=> val s2: String? = null // works !

s1.length
s2.length // NullPointerException

=> val s:String?
	if(s != null)
		x= s.length
OR
	using safe access Expression
		x= s?.length
	(? checks if (s is null )=> return null else return length)

	What is the type of x ? => nullable int 
	val x : Int? = s?.length
	OR
	val x:Int = s?.length ?  :0 //0 is assigned as default value if expression is null

Exercice:
	val a:Int? = null
	val b:Int? = 1
	val c:Int = 2

	val s1= (a ?: 0) + c
	val s2= (b ?: 0) + c
	print (" $s1$s2")

	=> Result :  23


We can throw NPE exception explicitly using :
s!! ( if s is null NPE will be thrown)

Excercice :  Which line(s) wonâ€™t compile?

	#1 fun isFoo1(n: Name) = n.value == "foo"
	#2 fun isFoo2(n: Name?) = n.value == "foo"
	#3 fun isFoo3(n: Name?) = n != null && n.value == "foo"
	#4 fun isFoo4(n: Name?) = n?.value == "foo"

	fun main(args: Array<String>) { 
	#5   isFoo1(null)
	#6   isFoo2(null) 
	#7   isFoo3(null) 
	#8   isFoo4(null)
	 }

   Answer : 
   2 // Only ?. or non-null asserted !!. calls are allowed on a nullable receiver of type ?Name
    5 // Null can not be a value of a non-null type Name

 Excercice : What will be printed ?
 	val x: Int? = 1
	val y: Int = 2
	val sum = x ?: 0 + y
	println(sum)

	Answer : 1 // Elvis ?: has a higher priority than + operator
	A confusion use case which can be solved using parentheses
	val s2 = x ?:(0+y) // 1
	val s3 = (x ?:0) +y // 3


	* Nullable List
	List<Int?> // the Int objects inside the liste could be null
	List<Int>? // the list could be null

	Excercice: Mark the lines which require a question mark to make the code compile

		fun foo(list1: List<Int?>, list2: List<Int>?) { 
		#1  list1.size
		#2  list2.size

		#3  val i: Int = 
		#4    list1.get(0)
		#5  val j: Int = 
		#6    list2.get(0)
		  }

		  Answer :
		  3 // Int? because inferred type is Int? ( int could be null)
		  2 // list2?.size ( safe access because list2 could be null )
		  6 // same here
		  5 // val i: Int? = list2?.size (since the assigned value could be null)


2. Safe Casts


	if (str is String)
	{
		val s = str as String
		s.toUpperCase()
	}

	In Kotlin explicit cast is not needed , we have SMART cast
	if ( str is String)
		str.toUpperCase()

	OR

	(str as? String)?.toUpperCase() //returns null if expressions can't be cast

	=> Type cast as throws ClassCastException, if the cast is unsuccessful. Safe cast as? returns null, if the cast is unsuccessful


