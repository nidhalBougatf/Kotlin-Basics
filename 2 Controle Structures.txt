
II.Control structures

1. Conditionals : If & when ( when => Switch in Java)

	val max = if (a>b) a else b  ( there is no : (a>b) a : b)

	fun Test ( number:Int):String = when (number){
									1->"one"
									2->"two"
									3->"three"
									else -> "error"
								}
	!!! no break !!!

	fun Test2 ( number:Int):String = when (number){
									1,3,5,7,9->"even"
									2,4,6,8->"odd"
									else -> throw Exception ("1..9")
								}

	fun Test3 ( x:Int, y:Int):String = when (setOf(x,y)){
									setOf(0,0)->"center"
									else -> throw Exception ("bad location")
								}

	*Cheking types with when

	when (pet) // OR when ( val pet= getMyPet())
	{
		is Cat -> pet.meow()
		is Dof -> pet.woof()
	}

!!! no need for casting the type after checking it like in java !!!


*Using when without an argument

	fun updateWeather(degrees: Int)
	{
		val (description,colour) = when {
		degrees<5 ->"cold" to BLUE
		degrees <23 -> "mild" to ORANGE
		else -> "hot" to RED
		}

	}


=>  Pay attention , there is no need to change if to when,
you can use when only if needed ( depending on the use case)



2. Loops

a. while , do.. while are the same as Java
b. for loop

	val list = listOf("a","b","c")
	for ( s in list) // OR for (s:String in list) 
	{print(s)}
	=> Result : abc


*iterating over map
	val map = mapOf(1 to "one", 2 to "two", 3 to "three")
	for ( (key,value) in map)
	{
		print ("$key : $value")
	}

	 *iterating with index
	 val list = listOf("a","b","c")
	 for ( (index,element)  in list.withIndex() )
	 {
	 	print (" $index : $element")
	 }
	 Result :
	 0: a
	 1: b
	 2: c

*iterating over range
	for (i in 1..9)
	{
		print (i)
	}
	=> Result : 123456789
	OR
	for (i in 1 until 9) // 9 not included ( upperbound excluded)
	{
		print (i)
	}
	=> Result : 12345678

	for ( i in 9 downTo 1 step 2)
	{ print (i) }
	Result => 97531


*iterating over string 
	for (ch in "abc") {
	  print(ch ) 
	}
	Result : abc
	for (ch in "abc") {
	  print(ch + 1) 
	}
	Result : bcd // ch+1 means next character in alphabet


 3.IN (used for cheks and ranges)

 Exmaple:
 
 -for() i in 0..9) // iterating
 
 - c in 'a'..'z' // check for belonging
 	// same as : ('a'<= c && c<='z')
 	k !in 'a'..'d' // NOT IN
 	if(element in list ) // Java : if(list.contains(element))
 
 - when (c){
			 in '0'..'9' ->" number"
			 in 'a'..'z', in 'A'..'Z' -> "letter"
			 else -> "error"
			 }

-	 println("Kotlin" in "Java".."Scala")
	println("Kotlin" in setOf("Java", "Scala"))
	Result : true false
	// first line : string are compared by their alphabetic order ( charcter by character)

	"ball" in "a" .."k" // "a".compareTo("ball")<=0 && "ball".compareTo("k")<=0


	"ball" in "a" .."k" // true : because 'b' is between 'a'..'k'
	"zoo" in "a".."k" // false : because 'z' isNOTbetween 'a'..'k'

- Comparing dates
	class MyDate: Comparable<MyDate>

	if (myDate in startDate..endDate) //no need for compareTO!



4. Exceptions
KotlinFile.kt 
	@Throws (IOException::calss)
	fun bar(){ throw IOException() }

JavaFile.java
	try{
		kotlinFile.bar()
	}catch ( IOException e){ print(" caught !")}

Example Control Structure:
Implement the function that checks whether a string is a valid identifier. A valid identifier is a non-empty string that starts with a letter or underscore and consists of only letters, digits and underscores.

	fun isValidIdentifier(s: String): Boolean {
	    if (s=="" || (s !in "a".."z" && s !in "A".."Z" && s.compareTo("_")<0))
	    return false
	   for( k in s)
	    {
	        if ( k !in 'a'..'z' && k !in 'A'..'Z' && k !in '0'..'9' && k.compareTo('_')<0 )
	        return false
	    }
	    return true
	}

	fun main(args: Array<String>) {
	    println(isValidIdentifier("name"))   // true
	    println(isValidIdentifier("_name"))  // true
	    println(isValidIdentifier("_12"))    // true
	    println(isValidIdentifier(""))       // false
	    println(isValidIdentifier("012"))    // false
	    println(isValidIdentifier("no$"))    // false
	}
